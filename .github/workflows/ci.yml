name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Job 1: コードチェック（リント、フォーマット）
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter with reviewdog (API)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          pnpm --filter @real-estate-dx/api eslint . --ext .ts,.tsx --format json > api-lint.json 2>&1
          LINT_EXIT_CODE=$?
          cat api-lint.json | reviewdog -f=eslint \
            -name="ESLint (API)" \
            -reporter="github-pr-review" \
            -filter-mode=nofilter \
            -fail-on-error=false \
            -level="warning"
          echo "API_LINT_ERRORS=$LINT_EXIT_CODE" >> $GITHUB_ENV
        continue-on-error: true

      - name: Run linter with reviewdog (Web)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          pnpm --filter web next lint --format json > web-lint.json 2>&1
          LINT_EXIT_CODE=$?
          cat web-lint.json | reviewdog -f=eslint \
            -name="ESLint (Web)" \
            -reporter="github-pr-review" \
            -filter-mode=nofilter \
            -fail-on-error=false \
            -level="warning"
          echo "WEB_LINT_ERRORS=$LINT_EXIT_CODE" >> $GITHUB_ENV
        continue-on-error: true

      - name: Check types with reviewdog (API)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          pnpm --filter @real-estate-dx/api tsc --noEmit 2>&1 | tee api-typecheck.log
          TYPECHECK_EXIT_CODE=$?
          cat api-typecheck.log | reviewdog -f=tsc \
            -name="TypeScript (API)" \
            -reporter="github-pr-review" \
            -filter-mode=nofilter \
            -fail-on-error=false \
            -level="error"
          echo "API_TYPECHECK_ERRORS=$TYPECHECK_EXIT_CODE" >> $GITHUB_ENV
        continue-on-error: true

      - name: Check types with reviewdog (Web)
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set +e
          pnpm --filter web tsc --noEmit 2>&1 | tee web-typecheck.log
          TYPECHECK_EXIT_CODE=$?
          cat web-typecheck.log | reviewdog -f=tsc \
            -name="TypeScript (Web)" \
            -reporter="github-pr-review" \
            -filter-mode=nofilter \
            -fail-on-error=false \
            -level="error"
          echo "WEB_TYPECHECK_ERRORS=$TYPECHECK_EXIT_CODE" >> $GITHUB_ENV
        continue-on-error: true

      - name: Upload error logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: code-quality-logs
          path: |
            api-lint.json
            web-lint.json
            api-typecheck.log
            web-typecheck.log

      - name: Create error summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '## 📊 Code Quality Summary\n\n';
            
            // Count errors from logs
            let apiLintErrors = 0;
            let webLintErrors = 0;
            let apiTypeErrors = 0;
            let webTypeErrors = 0;
            
            try {
              const apiLint = JSON.parse(fs.readFileSync('api-lint.json', 'utf8'));
              apiLintErrors = apiLint.reduce((sum, file) => sum + (file.errorCount || 0), 0);
            } catch (e) {}
            
            try {
              const webLint = JSON.parse(fs.readFileSync('web-lint.json', 'utf8'));
              webLintErrors = webLint.reduce((sum, file) => sum + (file.errorCount || 0), 0);
            } catch (e) {}
            
            try {
              const apiTypeLog = fs.readFileSync('api-typecheck.log', 'utf8');
              apiTypeErrors = (apiTypeLog.match(/error TS\d+:/g) || []).length;
            } catch (e) {}
            
            try {
              const webTypeLog = fs.readFileSync('web-typecheck.log', 'utf8');
              webTypeErrors = (webTypeLog.match(/error TS\d+:/g) || []).length;
            } catch (e) {}
            
            summary += '| Check | API | Web |\n';
            summary += '|-------|-----|-----|\n';
            summary += `| ESLint Errors | ${apiLintErrors} | ${webLintErrors} |\n`;
            summary += `| TypeScript Errors | ${apiTypeErrors} | ${webTypeErrors} |\n`;
            summary += '\n';
            
            const totalErrors = apiLintErrors + webLintErrors + apiTypeErrors + webTypeErrors;
            if (totalErrors > 0) {
              summary += `⚠️ **Total errors found: ${totalErrors}**\n\n`;
              summary += 'Please check the inline comments on the Files tab for detailed error locations.\n';
            } else {
              summary += '✅ **All checks passed!**\n';
            }
            
            // Save summary for later use
            core.setOutput('summary', summary);
            core.setOutput('total_errors', totalErrors);

  # Job 2: ユニットテスト
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        run: |
          pnpm --filter @real-estate-dx/api exec prisma generate
          pnpm --filter @real-estate-dx/api exec prisma db push

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: pnpm test
        continue-on-error: true # テストが失敗する可能性があるため一時的に許容

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            apps/*/coverage
            packages/*/coverage

  # Job 3: ビルドチェック
  build:
    name: Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['@real-estate-dx/api', 'web']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm --filter ${{ matrix.app }} build
        continue-on-error: true # ビルドエラーがあるため一時的に許容

  # Job 4: Docker ビルドチェック
  docker-build:
    name: Docker Build Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ['api', 'web']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile.dev
          push: false
          tags: real-estate-dx-${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: セキュリティチェック
  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run audit
        run: pnpm audit --audit-level=high
        continue-on-error: true # 依存関係の脆弱性があってもワークフローを続行

  # Job 6: PR コメント（プルリクエスト時のみ）
  pr-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [code-quality, test-unit, build, docker-build, security]
    permissions:
      pull-requests: write
    steps:
      - name: Download error logs
        uses: actions/download-artifact@v4
        with:
          name: code-quality-logs
          path: ./logs
        continue-on-error: true

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const jobStatuses = {
              'Code Quality': '${{ needs.code-quality.result }}',
              'Unit Tests': '${{ needs.test-unit.result }}',
              'Build': '${{ needs.build.result }}',
              'Docker Build': '${{ needs.docker-build.result }}',
              'Security': '${{ needs.security.result }}'
            };
            
            let comment = '## 🤖 CI Check Results\n\n';
            comment += '| Check | Status |\n';
            comment += '|-------|--------|\n';
            
            for (const [job, status] of Object.entries(jobStatuses)) {
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⚠️';
              comment += `| ${job} | ${emoji} ${status} |\n`;
            }
            
            comment += '\n';
            
            // Add error summary if available
            try {
              let apiLintErrors = 0, webLintErrors = 0, apiTypeErrors = 0, webTypeErrors = 0;
              
              try {
                const apiLint = JSON.parse(fs.readFileSync('./logs/api-lint.json', 'utf8'));
                apiLintErrors = apiLint.reduce((sum, file) => sum + (file.errorCount || 0), 0);
              } catch (e) {}
              
              try {
                const webLint = JSON.parse(fs.readFileSync('./logs/web-lint.json', 'utf8'));
                webLintErrors = webLint.reduce((sum, file) => sum + (file.errorCount || 0), 0);
              } catch (e) {}
              
              try {
                const apiTypeLog = fs.readFileSync('./logs/api-typecheck.log', 'utf8');
                apiTypeErrors = (apiTypeLog.match(/error TS\d+:/g) || []).length;
              } catch (e) {}
              
              try {
                const webTypeLog = fs.readFileSync('./logs/web-typecheck.log', 'utf8');
                webTypeErrors = (webTypeLog.match(/error TS\d+:/g) || []).length;
              } catch (e) {}
              
              const totalErrors = apiLintErrors + webLintErrors + apiTypeErrors + webTypeErrors;
              
              if (totalErrors > 0) {
                comment += '### 📊 Error Summary\n\n';
                comment += '| Check | API | Web |\n';
                comment += '|-------|-----|-----|\n';
                comment += `| ESLint Errors | ${apiLintErrors} | ${webLintErrors} |\n`;
                comment += `| TypeScript Errors | ${apiTypeErrors} | ${webTypeErrors} |\n`;
                comment += '\n';
                comment += `⚠️ **Total errors found: ${totalErrors}**\n\n`;
                comment += '💡 **Tip**: Check the "Files changed" tab for inline error annotations from reviewdog.\n\n';
              }
            } catch (e) {
              console.log('Could not read error logs:', e);
            }
            
            comment += '> **Note**: Some checks are set to `continue-on-error` due to ongoing development.\n';
            comment += '> Error details are available as inline comments on changed files.\n';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🤖 CI Check Results')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }