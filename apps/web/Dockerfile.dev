# syntax=docker/dockerfile:1
ARG NODE_VERSION=20

# Base stage with pnpm
FROM node:${NODE_VERSION}-alpine AS base
RUN apk add --no-cache libc6-compat
RUN corepack enable && corepack prepare pnpm@8.15.9 --activate
WORKDIR /app

# Dependencies stage - monorepo aware
FROM base AS deps
COPY pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/web/package.json ./apps/web/
COPY packages/shared/package.json ./packages/shared/

# Use BuildKit cache mount for pnpm store
RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm fetch --frozen-lockfile

RUN --mount=type=cache,id=pnpm,target=/root/.local/share/pnpm/store \
    pnpm install --frozen-lockfile

# Development stage
FROM base AS development
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/web/node_modules ./apps/web/node_modules
COPY --from=deps /app/packages/shared/node_modules ./packages/shared/node_modules

# Copy workspace files
COPY pnpm-workspace.yaml ./
COPY turbo.json ./

# Copy package files
COPY apps/web/package.json ./apps/web/
COPY packages/shared/package.json ./packages/shared/

# Copy source files (these will be overridden by volume mounts in dev)
COPY apps/web ./apps/web
COPY packages/shared ./packages/shared

# Set working directory
WORKDIR /app

# Expose port
EXPOSE 3000

# Development command with fast refresh
ENV NEXT_TELEMETRY_DISABLED=1
CMD ["pnpm", "--filter", "web", "dev"]