# Production Environment Docker Compose
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  # API Server
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
      target: production
    container_name: real-estate-dx-api-prod
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - UPLOAD_DIR=/app/uploads
      - PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - uploads_data:/app/uploads
      - api_logs:/app/logs
    networks:
      - real-estate-dx-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); http.get('http://localhost:8000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: production
    container_name: real-estate-dx-web-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    networks:
      - real-estate-dx-network
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # AI Worker Service
  ai-worker:
    build:
      context: ./apps/ai-worker
      dockerfile: Dockerfile
      target: production
    container_name: real-estate-dx-ai-worker-prod
    ports:
      - "8001:8001"
    environment:
      - PYTHON_ENV=production
      - REDIS_URL=${REDIS_URL}
      - API_URL=http://api:8000
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/google-service-account.json
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ai_models_data:/app/models
      - ./credentials:/app/credentials:ro
      - ai_worker_logs:/app/logs
    networks:
      - real-estate-dx-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
        reservations:
          cpus: '1.0'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: real-estate-dx-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - real-estate-dx-network
    depends_on:
      - web
      - api
    restart: unless-stopped
    profiles:
      - nginx

volumes:
  uploads_data:
    driver: local
  ai_models_data:
    driver: local
  api_logs:
    driver: local
  ai_worker_logs:
    driver: local
  nginx_logs:
    driver: local

# Extend the existing network
networks:
  real-estate-dx-network:
    external: true